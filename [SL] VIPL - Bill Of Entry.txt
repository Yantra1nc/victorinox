/**
 * @NAPiVersion 2.x
 * @NScriptType Suitelet
 */
 

 /*************************************************************
Script Name: [SL] VIPL - Bill Of Landing Entry
Script Type: Suitelet Script
Created Date: 06/10/2021
Created By: Nikita Shinde
Company : Yantra Inc.
Description: 
*************************************************************/

define(['N/record', 'N/encode', 'N/ui/serverWidget', 'N/error','N/search', 'N/runtime','N/redirect','N/url','N/format','N/task'], 
function(record, encode, ui, error, search, runtime,redirect,url,format,task) {
	function onRequest(context)
	{
		var requestObj = context.request;
		if(requestObj.method == "GET") {
			try
			{
			   var form	    = ui.createForm({title: 'Bill Of Entry'});
			   form.clientScriptModulePath = '/SuiteScripts/CL_VIPL_BillOfEntry.js';
				
				var vendorId     = requestObj.parameters.vendorid;
				var billofEntryId = requestObj.parameters.billofentryid;
form.addFieldGroup({      
					id: "custpage_primaryinfor",     
					label: "Primary Information",   
					}); 
				var vendor 	    =  form.addField({id:'custpage_vendor',type: ui.FieldType.SELECT,source: 'vendor',label:'Vendor',container:"custpage_primaryinfor"});
				var billofEntry 	=  form.addField({id:'custpage_billofentry',type: ui.FieldType.TEXT,label:'Bill Of Entry Number',container:"custpage_primaryinfor"});
				
			
				if(vendorId){
					vendor.defaultValue	= vendorId;
				}
				if(billofEntryId){
					billofEntry.defaultValue	= billofEntryId;
				}
				
				if(vendorId || billofEntryId) {
					
					form.addFieldGroup({      
					id: "custpage_paymentinfoid",     
					label: "Assesable Value",   
					});     
					form.addFieldGroup({     
					id: "custpage_filtersid",        
					label: "Landed Cost",      
					});   				 	
					var fright =	form.addField({id:'custpage_fright',type: ui.FieldType.TEXT,label:'Fright(Assesable)',container: "custpage_paymentinfoid"});
					var misc_charges =  form.addField({id:'custpage_misc',type: ui.FieldType.TEXT,label:'Misc Charges',container: "custpage_paymentinfoid"});
					var other_exp =  form.addField({id:'custpage_otherexp',type: ui.FieldType.TEXT,label:'Other Expenses',container: "custpage_paymentinfoid"});					
					//var exch_rate =  form.addField({id:'custpage_exchrate',type: ui.FieldType.TEXT,label:'Exchange Rate',container: "custpage_paymentinfoid"});
					
					var fright_landedcost =  form.addField({id:'custpage_frightlandedcost',type: ui.FieldType.TEXT,label:'Fright',container: "custpage_filtersid"});					
					var clearing_charges =  form.addField({id:'custpage_clearingcharges',type: ui.FieldType.TEXT,label:'Clearing Charges',container: "custpage_filtersid"});
				}
				
				var Search      = form.addButton({id: 'custpage_billofentry_search', label: 'Search',functionName:'fieldData()'});
				var sublist		= form.addSublist({id : 'custpage_sublistid',type : ui.SublistType.LIST, label : 'Item Receipt List'});
				sublist.addButton({id :'custpage_markall',label :'Mark all',functionName:'markall()'});
                sublist.addButton({id :'custpage_unmarkall',label :'Unmark all',functionName:'unmarkall()'}); 
				
				var sub_chk             = sublist.addField({id : 'custpage_sub_chkbox', type : ui.FieldType.CHECKBOX, label : 'Select'});
				var sub_transId         = sublist.addField({id : 'custpage_sub_internalid', type : ui.FieldType.TEXT, label : 'Transaction Id'});
				var sub_transType       = sublist.addField({id : 'custpage_sub_transtype', type : ui.FieldType.TEXT,label : 'Transaction Type'});
				var sub_transNumber     = sublist.addField({id : 'custpage_sub_transnumber', type : ui.FieldType.TEXT, label : 'Transaction Number'});
				var exchange_rate     = sublist.addField({id : 'custpage_exchrate', type : ui.FieldType.TEXT, label : 'Exchange Rate'});
				sublist.addField({id : 'custpage_sub_amount', type : ui.FieldType.TEXT, label : 'Amount'});
				
				sublist.addField({id : 'custpage_vendor_name', type : ui.FieldType.TEXT, label : 'Vendor Name'});
				sublist.addField({id : 'custpage_item_receiptdate', type : ui.FieldType.TEXT, label : 'Item Receipt Date'});
				sublist.addField({id : 'custpage_bill_of_entry', type : ui.FieldType.TEXT, label : 'Bill Of Entry'});
				//sublist.addField({id : 'custpage_quantity', type : ui.FieldType.TEXT, label : 'Quantity'});
				var itemReceiptFilter	= [];
				var itemReceiptColumn	= [];
				itemReceiptFilter.push([
					["shipping","is","F"], 
					"AND", 
					["mainline","is","T"], 
					"AND", 
					["taxline","is","F"],
					"AND", 
					["cogs","is","F"]
				]);
				if(vendorId || billofEntryId) {
					itemReceiptFilter.push("AND");
					itemReceiptFilter.push(["entity", "is", vendorId]);
					itemReceiptFilter.push("AND");
					itemReceiptFilter.push(["custbody_vipl_boe", "is", billofEntryId]);
                  itemReceiptFilter.push("AND");
					itemReceiptFilter.push(["mainline", "is", "T"]);
				}

/* 				if(billofEntryId) {
					itemReceiptFilter.push("AND");
					itemReceiptFilter.push(["createdfrom.custbody_in_bill_of_entry_num", "anyof", billofEntryId]);
				} */
				
				itemReceiptColumn.push(search.createColumn({name: "entity"}));
				itemReceiptColumn.push(search.createColumn({name: "type"}));
				itemReceiptColumn.push(search.createColumn({name: "tranid"}));
				itemReceiptColumn.push(search.createColumn({name: "internalid"}));
				itemReceiptColumn.push(search.createColumn({name: "custbody_total_amount"}));
				itemReceiptColumn.push(search.createColumn({name: "exchangerate"}));
				itemReceiptColumn.push(search.createColumn({name: "entity"}));
				itemReceiptColumn.push(search.createColumn({name: "trandate"}));
				itemReceiptColumn.push(search.createColumn({name: "custbody_vipl_boe"}));
				itemReceiptColumn.push(search.createColumn({name: "custbody_qty_total"}));
				//itemReceiptColumn.push(search.createColumn({name: "itemid",join: "item",label: "Name"}));
				var searchObj		= search.create({type: "itemreceipt", filters: itemReceiptFilter, columns: itemReceiptColumn});
				
				var searchCount		= searchObj.runPaged().count;
				var resultIndex = 0; 
				var resultStep = 1000;
				var searchResult = searchObj.run().getRange({
					start: resultIndex,
					end: resultIndex + resultStep
				});
				var billPaymentTransId = 18;
				for(var t=0; t< searchCount;t++) {
					entId       = searchResult[t].getValue({name: "entity"});
					entName     = searchResult[t].getText({name: "entity"});
					transId     = searchResult[t].getValue({name: "tranid"});
					type        = searchResult[t].getValue({name: "type"});
					id          = searchResult[t].getValue({name: "internalid"});
					amount 		= searchResult[t].getValue({name: "custbody_total_amount"});
					exchangerate= searchResult[t].getValue({name: "exchangerate"});
					vendorname 		= searchResult[t].getText({name: "entity"});
					ir_date= searchResult[t].getValue({name: "trandate"});
					billofentry= searchResult[t].getValue({name: "custbody_vipl_boe"});
					qty_landed= searchResult[t].getValue({name: "custbody_qty_total"});
					
					//item 		= searchResult[t].getValue({name: "itemid",join: "item",label: "Name"});
					if(_validateData(id)){
						sublist.setSublistValue({ id : 'custpage_sub_internalid', line : t, value : id });
					}
					if(_validateData(type)){
						sublist.setSublistValue({ id : 'custpage_sub_transtype', line : t, value : type });
					}
					if(_validateData(transId)){
						sublist.setSublistValue({ id : 'custpage_sub_transnumber', line : t, value : transId });
					}
					if(_validateData(amount)){
						sublist.setSublistValue({ id : 'custpage_sub_amount', line : t, value : amount });
					}
					if(_validateData(exchangerate)){
						sublist.setSublistValue({ id : 'custpage_exchrate', line : t, value : exchangerate });
					}
					if(_validateData(vendorname)){
						sublist.setSublistValue({ id : 'custpage_vendor_name', line : t, value : vendorname });
					}
					if(_validateData(ir_date)){
						sublist.setSublistValue({ id : 'custpage_item_receiptdate', line : t, value : ir_date });
					}
					if(_validateData(billofentry)){
						sublist.setSublistValue({ id : 'custpage_bill_of_entry', line : t, value : billofentry });
					}
					
					//log.debug("item",item);
				}
				
				var calcBillOfEntry = form.addSubmitButton({label: 'Calculate Bill Of Entry'});
				context.response.writePage(form);
				
			}catch(ex){
				log.debug("Error In If",ex.message);
			}
		}
		else{
			try{
				var form	         = ui.createForm({title: 'Calculate Bill Of Entry'});
				var post_fright = context.request.parameters.custpage_fright;
				var post_misc_charges = context.request.parameters.custpage_misc;
				//var post_exhangerate = context.request.parameters.custpage_exch_rate;
				var post_vendor = context.request.parameters.custpage_vendor;
				log.debug("post_exhangerate",post_exhangerate);
				log.debug("post_fright",post_fright);
				log.debug("post_misc_charges",post_misc_charges);
				
				var landed_fright = context.request.parameters.custpage_frightlandedcost;
				var landed_clearing =context.request.parameters.custpage_clearingcharges;
				var landed_otherexpenses =context.request.parameters.custpage_otherexp;
				//var qty_total=context.request.parameters.custpage_quantity;
				var today_date = new Date();
				var qty_total = 0;
				var amount_total = 0;
				var sublist		= form.addSublist({id : 'custpage_post_sublistid',type : ui.SublistType.LIST, label : 'Item Receipt List'});
				var sub_transId         = sublist.addField({id : 'custpage_post_sub_internalid', type : ui.FieldType.TEXT, label : 'Transaction Id'});
				var sub_transType       = sublist.addField({id : 'custpage_post_sub_transtype', type : ui.FieldType.TEXT,label : 'Transaction Type'});
				var sub_transNumber     = sublist.addField({id : 'custpage_post_sub_transnumber', type : ui.FieldType.TEXT, label : 'Transaction Number'});
				var sub_amt     = sublist.addField({id : 'custpage_sub_calculation', type : ui.FieldType.TEXT, label : 'Additon'}).updateDisplayType({displayType : ui.FieldDisplayType.HIDDEN});
				sublist.addField({id : 'custpage_sub_insurance', type : ui.FieldType.TEXT, label : 'Insurance'});	
				sublist.addField({id : 'custpage_sub_total', type : ui.FieldType.TEXT, label : 'Total'});	
				sublist.addField({id : 'custpage_exch', type : ui.FieldType.TEXT, label : 'Exchange Rate'});
				sublist.addField({id : 'custpage_assesable', type : ui.FieldType.TEXT, label : 'Assesable Value'});	
				sublist.addField({id : 'custpage_quantity_post', type : ui.FieldType.TEXT, label : 'Qunatity'});					
				var lineCount 	     = context.request.getLineCount({group:'custpage_sublistid'});
				if(lineCount > 0)
				{
					 /* for (var i = 0; i < lineCount; i++){
						var qty  =  context.request.getSublistValue({group:"custpage_sublistid",name:'itemquantity',line: i});
						log.debug("qty",qty);
						qty_total = parseFloat(qty_total)+parseFloat(qty);	
					} 
					log.debug("qty_total",qty_total); */
					for (var i = 0; i < lineCount; i++) 
					{
						var checkBoxFld = context.request.getSublistValue({group:"custpage_sublistid",name:'custpage_sub_chkbox',line: i});
						//log.debug("checkBoxFld",checkBoxFld);						
						
						if(checkBoxFld == 'T'){
							var transIntId  =  context.request.getSublistValue({group:"custpage_sublistid",name:'custpage_sub_internalid',line: i});
							log.debug("transIntId",transIntId);
							var amount_check  =  context.request.getSublistValue({group:"custpage_sublistid",name:'custpage_sub_amount',line: i});
							log.debug("amount_check",amount_check);
							var type = context.request.getSublistValue({group:"custpage_sublistid",name:'custpage_sub_transtype',line: i});
							var tran_no = context.request.getSublistValue({group:"custpage_sublistid",name:'custpage_sub_transnumber',line: i});
							var post_exhangerate = context.request.getSublistValue({group:"custpage_sublistid",name:'custpage_exchrate',line: i});
							
                          var IR_record = record.load({
								type:"itemreceipt",
								id:transIntId
							});
							var item_count = IR_record.getLineCount("item");
							for(var ir = 0; ir<item_count;ir++){
								var item_name = IR_record.getSublistValue("item","item",ir);
								log.debug("item_name",item_name);
								
								var item_rate = IR_record.getSublistValue("item","rate",ir);
								log.debug("item_rate",item_rate);
								var qty = IR_record.getSublistValue({ sublistId: 'item',fieldId: 'itemquantity',line: ir});
								log.debug("qty",qty);
								var amt = item_rate * qty;
						
								amount_total = parseFloat(amount_total) + parseFloat(amt);
								qty_total = parseFloat(qty_total)+parseFloat(qty);
								var landed_frightsplit = landed_fright/amt;
								var landed_clearingsplit = landed_clearing/amt;
								var landed_otherexpensessplit = landed_otherexpenses/amt;
								
								var fieldLookUp = search.lookupFields({
									type: "item",
									id: item_name,
									columns: ['custitem_vipl_custom_duty', 'custitem_vipl_totalwelfarecharger', 'custitem_vipl_igstlandedcost']
								});
								log.debug("fieldLookUp",JSON.stringify(fieldLookUp));
								var custom_duty_percentage = fieldLookUp.custitem_vipl_custom_duty;
								var sur_charge_percentage = fieldLookUp.custitem_vipl_totalwelfarecharger;
								var igst_percentage = fieldLookUp.custitem_vipl_igstlandedcost;	
								custom_duty_percentage = custom_duty_percentage.split("%")[0];
								log.debug("custom_duty_percentage",custom_duty_percentage);
								sur_charge_percentage = sur_charge_percentage.split("%")[0];
								log.debug("sur_charge_percentage",sur_charge_percentage);
								igst_percentage= igst_percentage.split("%")[0];
								log.debug("igst_percentage",igst_percentage);
							}
							
							
							var landed_fightfinal = landed_frightsplit * amount_check;
							var landed_clearingfinal = landed_clearingsplit * amount_check;
							var landed_otherexpensefinal = landed_otherexpensessplit * amount_check;
							
							
							var frieght_split = post_fright * amt;
							log.debug("frieght_split",frieght_split);
							var frieght_spliting =frieght_split/amount_check;
							log.debug("final frieght_spliting",frieght_spliting);
							
							var misc_split = post_misc_charges * amt;
							log.debug("misc_split",misc_split);
							var misc_spliting =misc_split/amount_check;
							log.debug("final misc_spliting",misc_spliting);
							
							var exch_split = post_exhangerate * amt;
							log.debug("exch_split",exch_split);
							var exch_spliting =exch_split/amount_check;
							log.debug("final exch_spliting",exch_spliting);
							
							//var amt_fright_misc = parseFloat(amt) + parseFloat(frieght_spliting) + parseFloat(misc_spliting);
							var amt_fright_misc = parseFloat(amount_total) + parseFloat(post_fright) + parseFloat(post_misc_charges);
							log.debug("amt_fright_misc",amt_fright_misc);
							sublist.setSublistValue({ id : 'custpage_post_sub_internalid', line : i, value : transIntId});
							sublist.setSublistValue({ id : 'custpage_sub_calculation', line : i, value : Math.abs(amt_fright_misc.toFixed(2)) });
							sublist.setSublistValue({ id : 'custpage_post_sub_transtype', line : i, value : type });							
							sublist.setSublistValue({ id : 'custpage_post_sub_transnumber', line : i, value : tran_no });
							sublist.setSublistValue({ id : 'custpage_quantity_post', line : i, value:qty_total});
							var amount_tofixed = amt_fright_misc.toFixed(2);
                          var insurance_total = parseFloat(amount_total) + parseFloat(post_misc_charges);
                          var insurance_tofixed = insurance_total.toFixed(2);
							var insurance = (insurance_tofixed/100)*1.125;
							sublist.setSublistValue({ id : 'custpage_sub_insurance', line : i, value : Math.abs(insurance.toFixed(2)) });
							
							var total = parseFloat(amount_tofixed)+parseFloat(insurance);
							sublist.setSublistValue({ id : 'custpage_sub_total', line : i, value : Math.abs(total.toFixed(2))});
							
							var exchange_rate = total * exch_spliting;
							//log.debug("exchange_rate",exchange_rate);
							sublist.setSublistValue({ id : 'custpage_exch', line : i, value : post_exhangerate});
							
							var assesable_value = total * post_exhangerate;
							log.debug("assesable_value",assesable_value);
							sublist.setSublistValue({ id : 'custpage_assesable', line : i, value : assesable_value.toFixed(2)});
							
							var custom_duty = (assesable_value/100)*custom_duty_percentage;
					
							var sur_charge = (custom_duty/100)*sur_charge_percentage;
							var igst_cal = parseFloat(assesable_value) + parseFloat(custom_duty) + parseFloat(sur_charge);
							log.debug("igst_cal",igst_cal);
							var igst = (igst_cal/100)*igst_percentage;
							log.debug("custom_duty",custom_duty);
							log.debug("sur_charge",sur_charge);
							log.debug("igst",igst);
							
							var bill_record = record.create({
								type:"customrecord_vipl_bill_of_landing_entry",
								isDynamic: true
							});
							bill_record.setValue("custrecord_vipl_freight",post_fright);
							bill_record.setValue("custrecord_vipl_insurance",Math.abs(insurance.toFixed(2)));
							bill_record.setValue("custrecord_vipl_misc_charge",post_misc_charges);
							bill_record.setValue("custrecord_vipl_currency_exchange_rate",exch_spliting.toFixed(2));
							
							bill_record.setValue("custrecord_clearing_charges",landed_clearing);							
							bill_record.setValue("custrecord_other_expenses",landed_otherexpenses);
							bill_record.setValue("custrecord_landed_frieght",landed_fright);
							
							bill_record.setValue("custrecord_vipl_invoice_number",tran_no);							
							bill_record.setValue("custrecord_vipl_vendor_name",post_vendor);							
							bill_record.setValue("custrecord_vipl_ir_subsidiary",3);							
							bill_record.setValue("custrecord_vipl_date",today_date);
							//bill_record.setValue("custrecord_vipl_ir_subsidiary",exch_spliting);
							
							bill_record.selectNewLine({sublistId: 'recmachcustrecord2'});
							bill_record.setCurrentSublistValue({sublistId: 'recmachcustrecord2',fieldId: 'custrecord_vipl_basic_custom_duty',value: custom_duty.toFixed(2)});
							bill_record.setCurrentSublistValue({sublistId: 'recmachcustrecord2',fieldId: 'custrecord_vipl_social_welfare_surcharge',value:sur_charge.toFixed(2)});
							bill_record.setCurrentSublistValue({sublistId: 'recmachcustrecord2',fieldId: 'custrecord_vipl_igst',value:igst.toFixed(2)});
							bill_record.setCurrentSublistValue({sublistId: 'recmachcustrecord2',fieldId: 'custrecord_vipl_transaction_number',value:transIntId});
							bill_record.commitLine({sublistId: 'recmachcustrecord2'});
							
							var bill_parent_id = bill_record.save();
							
							
							/* var bill_record = record.create({
								type:"customrecord_vipl_bill_of_landing_entry",
								isDynamic: true
							});
							bill_record.setValue("custrecord_vipl_freight",frieght_spliting.toFixed(2));
							bill_record.setValue("custrecord_vipl_insurance",Math.abs(insurance.toFixed(2)));
							bill_record.setValue("custrecord_vipl_misc_charge",misc_spliting.toFixed(2));
							bill_record.setValue("custrecord_vipl_currency_exchange_rate",exch_spliting.toFixed(2));
							
							bill_record.setValue("custrecord_clearing_charges",landed_clearingfinal.toFixed(2));							
							bill_record.setValue("custrecord_other_expenses",landed_otherexpensefinal.toFixed(2));
							bill_record.setValue("custrecord_landed_frieght",landed_fightfinal.toFixed(2));
							
							bill_record.setValue("custrecord_vipl_invoice_number",tran_no);							
							bill_record.setValue("custrecord_vipl_vendor_name",post_vendor);							
							bill_record.setValue("custrecord_vipl_ir_subsidiary",3);							
							bill_record.setValue("custrecord_vipl_date",today_date);
							//bill_record.setValue("custrecord_vipl_ir_subsidiary",exch_spliting);
							
							bill_record.selectNewLine({sublistId: 'recmachcustrecord2'});
							bill_record.setCurrentSublistValue({sublistId: 'recmachcustrecord2',fieldId: 'custrecord_vipl_basic_custom_duty',value: custom_duty.toFixed(2)});
							bill_record.setCurrentSublistValue({sublistId: 'recmachcustrecord2',fieldId: 'custrecord_vipl_social_welfare_surcharge',value:sur_charge.toFixed(2)});
							bill_record.setCurrentSublistValue({sublistId: 'recmachcustrecord2',fieldId: 'custrecord_vipl_igst',value:igst.toFixed(2)});
							bill_record.setCurrentSublistValue({sublistId: 'recmachcustrecord2',fieldId: 'custrecord_vipl_transaction_number',value:transIntId});
							bill_record.commitLine({sublistId: 'recmachcustrecord2'});
							
							var bill_parent_id = bill_record.save(); */
							log.debug("bill_parent_id",bill_parent_id);
							
							/* if(bill_parent_id){
								var bill_child_record = record.create({
									type:"customrecord_vipl_bill_of_entry_child",
									isDynamic: true
								});
								bill_child_record.setValue("custrecord_vipl_basic_custom_duty",custom_duty);
								bill_child_record.setValue("custrecord_vipl_social_welfare_surcharge",sur_charge);
								bill_child_record.setValue("custrecord_vipl_igst",igst);
								bill_child_record.setValue("custrecord_vipl_transaction_number",transIntId);
								bill_child_record.setValue("custrecord2",bill_parent_id);
								var bill_child_id =bill_child_record.save();
								log.debug("bill_child_record",bill_child_record);
							} */
						}
					}
				}
				context.response.writePage(form);
			}catch(e){log.debug("Error In Else",e);}
		}

    }
	
	function _validateData(val) {
		if (val != null && val != 'undefined' && val != 'NaN' && val != '') {
			return true;
		}
		return false;
	}
	
	return{
        onRequest: onRequest
    }
});